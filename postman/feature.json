{
	"info": {
		"_postman_id": "d007bc0d-51cf-4270-91a6-e5a51a13fee0",
		"name": "Comments-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39614481"
	},
	"item": [
		{
			"name": "private",
			"item": [
				{
					"name": "add comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const api = new API(pm);",
									"const rnd = new RandomUtils();",
									"",
									"(async () => {",
									"    const user1 = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid1\", user1.id);",
									"",
									"    const user2 = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid\", user2.id);",
									"",
									"    const category = await api.addCategory(rnd.getCategory());",
									"",
									"    const eventData = rnd.getEvent(category.id);",
									"    const event = await api.addEvent(user1.id, eventData);",
									"",
									"    await api.publishEvent(event.id);",
									"",
									"    pm.collectionVariables.set(\"eid\", event.id);",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response has all necessary fields\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('text');",
									"    pm.expect(response).to.have.property('authorName');",
									"    pm.expect(response).to.have.property('event');",
									"    pm.expect(response).to.have.property('created');",
									"});",
									"",
									"pm.collectionVariables.set(\"cid\", response.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"A comment about event\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get user comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const api = new API(pm);",
									"const rnd = new RandomUtils();",
									"",
									"(async () => {",
									"    const user1 = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid1\", user1.id);",
									"",
									"    const user2 = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid\", user2.id);",
									"",
									"    const category = await api.addCategory(rnd.getCategory());",
									"",
									"    const eventData = rnd.getEvent(category.id);",
									"    const event = await api.addEvent(user1.id, eventData);",
									"",
									"    await api.publishEvent(event.id);",
									"",
									"    pm.collectionVariables.set(\"eid\", event.id);",
									"",
									"    await api.addComment(user2.id, event.id, {text: \"First comment\"});",
									"    await api.addComment(user2.id, event.id, {text: \"Second comment\"});",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ответ содержит массив комментариев\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const api = new API(pm);",
									"const rnd = new RandomUtils();",
									"",
									"(async () => {",
									"    const user1 = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid1\", user1.id);",
									"",
									"    const user2 = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid\", user2.id);",
									"",
									"    const category = await api.addCategory(rnd.getCategory());",
									"",
									"    const eventData = rnd.getEvent(category.id);",
									"    const event = await api.addEvent(user1.id, eventData);",
									"",
									"    await api.publishEvent(event.id);",
									"",
									"    pm.collectionVariables.set(\"eid\", event.id);",
									"",
									"    const comment = await api.addComment(user2.id, event.id, {text: \"Initial comment\"});",
									"    pm.collectionVariables.set(\"cid\", comment.id);",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Комментарий обновлён\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\", parseInt(pm.collectionVariables.get(\"cid\")));",
									"    pm.expect(jsonData).to.have.property(\"text\", \"Updated comment text\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Updated comment text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "{{cid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const api = new API(pm);",
									"const rnd = new RandomUtils();",
									"",
									"(async () => {",
									"    const user1 = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid1\", user1.id);",
									"",
									"    const user2 = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid\", user2.id);",
									"",
									"    const category = await api.addCategory(rnd.getCategory());",
									"",
									"    const eventData = rnd.getEvent(category.id);",
									"    const event = await api.addEvent(user1.id, eventData);",
									"",
									"    await api.publishEvent(event.id);",
									"",
									"    pm.collectionVariables.set(\"eid\", event.id);",
									"",
									"    const comment = await api.addComment(user2.id, event.id, {text: \"Comment to delete\"});",
									"    pm.collectionVariables.set(\"cid\", comment.id);",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "{{cid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "delete comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const api = new API(pm);",
									"const rnd = new RandomUtils();",
									"",
									"(async () => {",
									"    const user1 = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid1\", user1.id);",
									"",
									"    const user2 = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid2\", user2.id);",
									"",
									"    const category = await api.addCategory(rnd.getCategory());",
									"",
									"    const eventData = rnd.getEvent(category.id);",
									"    const event = await api.addEvent(user1.id, eventData);",
									"",
									"    await api.publishEvent(event.id);",
									"",
									"    pm.collectionVariables.set(\"eid\", event.id);",
									"",
									"    const comment1 = await api.addComment(user2.id, event.id, {text: \"First comment\"});",
									"    const comment2 = await api.addComment(user2.id, event.id, {text: \"Second comment\"});",
									"",
									"    pm.collectionVariables.set(\"cid1\", comment1.id);",
									"    pm.collectionVariables.set(\"cid2\", comment2.id);",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус ответа 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?ids={{cid1}},{{cid2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{cid1}},{{cid2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete event comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const api = new API(pm);",
									"const rnd = new RandomUtils();",
									"",
									"(async () => {",
									"    const user = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid\", user.id);",
									"",
									"    const category = await api.addCategory(rnd.getCategory());",
									"    const eventData = rnd.getEvent(category.id);",
									"    const event = await api.addEvent(user.id, eventData);",
									"    await api.publishEvent(event.id);",
									"    pm.collectionVariables.set(\"eid\", event.id);",
									"",
									"    const comment1 = await api.addComment(user.id, event.id, { text: \"First comment\" });",
									"    const comment2 = await api.addComment(user.id, event.id, { text: \"Second comment\" });",
									"",
									"    pm.collectionVariables.set(\"cid1\", comment1.id);",
									"    pm.collectionVariables.set(\"cid2\", comment2.id);",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус код 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "public",
			"item": [
				{
					"name": "get comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const api = new API(pm);",
									"const rnd = new RandomUtils();",
									"",
									"(async () => {",
									"    const user = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid\", user.id);",
									"",
									"    const category = await api.addCategory(rnd.getCategory());",
									"    const eventData = rnd.getEvent(category.id);",
									"    const event = await api.addEvent(user.id, eventData);",
									"    await api.publishEvent(event.id);",
									"    pm.collectionVariables.set(\"eid\", event.id);",
									"",
									"    const comment = await api.addComment(user.id, event.id, { text: \"Comment for public get\" });",
									"    pm.collectionVariables.set(\"cid\", comment.id);",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус код 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Проверка id комментария\", function () {",
									"    pm.expect(pm.response.json().id).to.eql(parseInt(pm.collectionVariables.get(\"cid\")));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{cid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const api = new API(pm);",
									"const rnd = new RandomUtils();",
									"",
									"(async () => {",
									"    const user = await api.addUser(rnd.getUser());",
									"    pm.collectionVariables.set(\"uid\", user.id);",
									"",
									"    const category = await api.addCategory(rnd.getCategory());",
									"    const eventData = rnd.getEvent(category.id);",
									"    const event = await api.addEvent(user.id, eventData);",
									"    await api.publishEvent(event.id);",
									"    pm.collectionVariables.set(\"eid\", event.id);",
									"",
									"    await api.addComment(user.id, event.id, { text: \"First comment\" });",
									"    await api.addComment(user.id, event.id, { text: \"Second comment\" });",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус код 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ответ содержит список комментариев\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.above(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/comments?from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post('/users/' + userId + '/events/' + eventId + '/comments', comment, \"Ошибка при добавлении комментария\", verbose);",
					"    }",
					"",
					"    async updateComment(userId, commentId, comment, verbose=null) {",
					"        return this.patch('/users/' + userId + '/comments/' + commentId, comment, \"Ошибка при обновлении комментария\", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "cid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "cid1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "cid2",
			"value": "2",
			"type": "string"
		},
		{
			"key": "uid2",
			"value": ""
		}
	]
}